@page "/"
@using Bdziam.UI.Model.Enums
@using Bdziam.UI.Theming
@using Blazicons
@rendermode InteractiveServer
@inject ThemeService ThemeService
<BStack Orientation="Orientation.Vertical" Spacing="Size.Small">
   
    <BText Typo="Typo.H2" MdSysColor="MdSysColor.Primary">Text</BText>
    <BStack Orientation="Orientation.Vertical" Padding="Size.Medium" Spacing="Size.Medium">
        <BText Typo="Typo.H1" MdSysColor="MdSysColor.Primary">
            Primary Heading
        </BText>

        <BText Typo="Typo.H2" MdSysColor="MdSysColor.Secondary">
            Secondary Heading
        </BText>

        <BText Typo="Typo.Body" MdSysColor="MdSysColor.Info">
            Body Text with Info Color
        </BText>

        <BText Typo="Typo.Caption" MdSysColor="MdSysColor.Error">
            Caption Text with Error Color
        </BText>
    </BStack>
    <BText Typo="Typo.H2" MdSysColor="MdSysColor.Primary">Text</BText>
    <BStack Orientation="Orientation.Horizontal" Padding="Size.Medium" Spacing="Size.Medium">
        <BButton Id="@ButtonId"
                 Variant="ButtonVariant.Normal"
                 MdSysColor="MdSysColor.Primary"
                 OnClick="TogglePopover">
            @buttonText
        </BButton>

        <BPopover IsOpen="@isPopoverOpen"
                  IsOpenChanged="@(value => isPopoverOpen = value)"
                  TargetElementId="@ButtonId"
                  Position="Position.Bottom"
                  MarginSize="Size.Small"
                  ColorVariant="ColorVariant.Surface">
            <div class="p-4">
                This is the popover content.
            </div>
        </BPopover>
    </BStack>
</BStack>


@code {
private bool isPopoverOpen = false;
private string ButtonId { get; } = $"button-{Guid.NewGuid()}";
private string buttonText => isPopoverOpen ? "Close" : "Open";

private void TogglePopover()
{
isPopoverOpen = !isPopoverOpen;
}

}